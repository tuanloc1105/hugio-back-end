def dockerImage = "tuanloc/inventory-service"
def dockerTag = ""
def k8sReplica = 1
def k8sNamespace = 'hugio'
def userIdCause = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')
def now = (new Date()).format("yyMMddHHmmss", TimeZone.getTimeZone('Asia/Ho_Chi_Minh'))

pipeline {
    agent any
    tools {
        maven "3.9.6"
        jdk "17"
    }
    environment {
        GIT_CREDENTIALS_ID = 'tuanloc-github'
        APPLICATION_GIT_BRANCH = 'master'
        APPLICATION_GIT_REPOSITRY = 'https://github.com/tuanloc1105/hugio-back-end.git'
        TARGET_DIR = '/home/ae403/hugio/inventory_service'
    }
    stages {
        stage('Checkout source') {
            steps {
                script {
                    def checkoutDetails = checkout([
                        $class: 'GitSCM',
                        branches: [[ name: ('*/' + APPLICATION_GIT_BRANCH) ]],
                        doGenerateSubmoduleConfigurations: false,
                        submoduleCfg: [],
                        userRemoteConfigs: [[ credentialsId: GIT_CREDENTIALS_ID, url: APPLICATION_GIT_REPOSITRY ]]
                    ])
                }

            }
        }
        stage('Build inventory service') {
            steps {
                script {
                    CURRENT_DATE = new java.text.SimpleDateFormat('yyyyMMdd').format(new Date())
                    CURRENT_TIME = new java.text.SimpleDateFormat('HHmmss').format(new Date())
                    dir('common') {
                        dockerTag = "$CURRENT_DATE" + "$CURRENT_TIME"
                        sh 'mvn clean install -DskipTests=true -Dfile.encoding=UTF8 -f pom.xml'
                    }
                    dir('hugio-inventory-service') {
                        sh 'mvn clean install -DskipTests=true -Dfile.encoding=UTF8 -f pom.xml'
                    }
                }
            }
        }
        stage('Copy source') {
            steps {
                script {
                    dir('hugio-inventory-service') {
                        sh "ssh ae403@192.168.1.22 mkdir -p $TARGET_DIR"
                        sh "scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -r ./helm_chart ae403@192.168.1.22:$TARGET_DIR"
                        sh "scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -r ./target ae403@192.168.1.22:$TARGET_DIR"
                        sh "scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no ./Dockerfile ae403@192.168.1.22:$TARGET_DIR"
                        sh "scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no ./logback.xml ae403@192.168.1.22:$TARGET_DIR"
                    }
                }
            }
        }
        stage('Deploy source') {
            steps {
                script {
                    sh "ssh ae403@192.168.1.22 \"cd $TARGET_DIR ; docker build . -t $dockerImage:$dockerTag\""
                    withCredentials([string(credentialsId: 'ae403-key', variable: 'SSH_PASSWORD')]) { // create a credential as a secret text in jenkins credential page
                        sh "ssh ae403@192.168.1.22 \"cd $TARGET_DIR ; docker save -o image.tar $dockerImage:$dockerTag ; echo \$SSH_PASSWORD | sudo -S microk8s ctr image import image.tar ; rm -f *.tar\""
                    }
                    sh "ssh ae403@192.168.1.22 \"cd $TARGET_DIR ; microk8s.helm upgrade -i --set image.name=$dockerImage,image.tag=$dockerTag,replica=$k8sReplica -n $k8sNamespace inventory-service ./helm_chart\""
                    sh "ssh ae403@192.168.1.22 \"cd $TARGET_DIR ; docker rmi $dockerImage:$dockerTag\""
                }
            }
        }
    }

	post {
		always {
			cleanWs()
		}
	}
}
